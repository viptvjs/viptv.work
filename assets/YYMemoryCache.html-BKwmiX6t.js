import{_ as s,c as a,f as e,o as p}from"./app-Dl6RDNVo.js";const t={};function l(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="_1-1-前言" tabindex="-1"><a class="header-anchor" href="#_1-1-前言"><span>1.1. 前言</span></a></h2><p>开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？<br> 本文将结合 YYCache 的源码逐步带大家找到答案。<br> YYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一）<br> YYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，更加难能可贵的是它的性能还非常高。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>YYCache 是由 YYMemoryCache 与 YYDiskCache 两部分组成的，其中 YYMemoryCache 作为高速内存缓存，而 YYDiskCache 则作为低速磁盘缓存。<br> YYMemoryCache 是内存缓存，所以存取速度非常快，主要用到两种数据结构的 LRU 淘汰算法</p></div><p>NSCache 是苹果提供的一个简单的内存缓存，它有着和 NSDictionary 类似的 API，不同点是它是线程安全的，并且不会 retain key。我在测试时发现了它的几个特点：NSCache 底层并没有用 NSDictionary 等已有的类，而是直接调用了 libcache.dylib，其中线程安全是由 pthread_mutex 完成的。另外，它的性能和 key 的相似度有关，如果有大量相似的 key (比如 “1”, “2”, “3”, …)，NSCache 的存取性能会下降得非常厉害，大量的时间被消耗在 CFStringEqual() 上，不知这是不是 NSCache 本身设计的缺陷。</p><h2 id="_1-2-介绍" tabindex="-1"><a class="header-anchor" href="#_1-2-介绍"><span>1.2. 介绍</span></a></h2><p>YYMemoryCache 是一个高速的内存缓存，用于存储键值对。它与 NSDictionary 相反，Key 被保留并且不复制。API 和性能类似于 NSCache，所有方法都是线程安全的。</p><p>YYMemoryCache 对象与 NSCache 的不同之处在于：</p><p>YYMemoryCache 使用 LRU(least-recently-used) 算法来驱逐对象；NSCache 的驱逐方式是非确定性的。<br> YYMemoryCache 提供 age、cost、count 三种方式控制缓存；NSCache 的控制方式是不精确的。<br> YYMemoryCache 可以配置为在收到内存警告或者 App 进入后台时自动逐出对象。</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token keyword">@interface</span> YYMemoryCache <span class="token punctuation">:</span> NSObject</span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">mark <span class="token operator">-</span> Attribute</span></span></span>
<span class="line"><span class="token keyword">@property</span> <span class="token punctuation">(</span>nullable<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> NSString <span class="token operator">*</span>name<span class="token punctuation">;</span> <span class="token comment">// 缓存名称，默认为 nil</span></span>
<span class="line"><span class="token keyword">@property</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> NSUInteger totalCount<span class="token punctuation">;</span> <span class="token comment">// 缓存对象总数</span></span>
<span class="line"><span class="token keyword">@property</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> NSUInteger totalCost<span class="token punctuation">;</span> <span class="token comment">// 缓存对象总开销</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">mark <span class="token operator">-</span> Limit</span></span></span>
<span class="line"><span class="token keyword">@property</span> NSUInteger countLimit<span class="token punctuation">;</span> <span class="token comment">// 缓存对象数量限制，默认无限制，超过限制则会在后台逐出一些对象以满足限制</span></span>
<span class="line"><span class="token keyword">@property</span> NSUInteger costLimit<span class="token punctuation">;</span> <span class="token comment">// 缓存开销数量限制，默认无限制，超过限制则会在后台逐出一些对象以满足限制</span></span>
<span class="line"><span class="token keyword">@property</span> NSTimeInterval ageLimit<span class="token punctuation">;</span> <span class="token comment">// 缓存时间限制，默认无限制，超过限制则会在后台逐出一些对象以满足限制</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@property</span> NSTimeInterval autoTrimInterval<span class="token punctuation">;</span> <span class="token comment">// 缓存自动清理时间间隔，默认 5s</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@property</span> BOOL shouldRemoveAllObjectsOnMemoryWarning<span class="token punctuation">;</span> <span class="token comment">// 是否应该在收到内存警告时删除所有缓存内对象</span></span>
<span class="line"><span class="token keyword">@property</span> BOOL shouldRemoveAllObjectsWhenEnteringBackground<span class="token punctuation">;</span> <span class="token comment">// 是否应该在 App 进入后台时删除所有缓存内对象</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@property</span> <span class="token punctuation">(</span>nullable<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>didReceiveMemoryWarningBlock<span class="token punctuation">)</span><span class="token punctuation">(</span>YYMemoryCache <span class="token operator">*</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我认为这是一个 hook，便于我们在收到内存警告时自定义处理缓存</span></span>
<span class="line"><span class="token keyword">@property</span> <span class="token punctuation">(</span>nullable<span class="token punctuation">,</span> copy<span class="token punctuation">)</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span>didEnterBackgroundBlock<span class="token punctuation">)</span><span class="token punctuation">(</span>YYMemoryCache <span class="token operator">*</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我认为这是一个 hook，便于我们在收到 App 进入后台时自定义处理缓存</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@property</span> BOOL releaseOnMainThread<span class="token punctuation">;</span> <span class="token comment">// 是否在主线程释放对象，默认 NO，有些对象（例如 UIView/CALayer）应该在主线程释放</span></span>
<span class="line"><span class="token keyword">@property</span> BOOL releaseAsynchronously<span class="token punctuation">;</span> <span class="token comment">// 是否异步释放对象，默认 YES</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span>BOOL<span class="token punctuation">)</span>containsObjectForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>key<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>objectForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>key<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setObject<span class="token punctuation">:</span><span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>object forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>key<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>setObject<span class="token punctuation">:</span><span class="token punctuation">(</span>nullable id<span class="token punctuation">)</span>object forKey<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>key withCost<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>cost<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeObjectForKey<span class="token punctuation">:</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>key<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeAllObjects<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">mark <span class="token operator">-</span> Trim</span></span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>trimToCount<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>count<span class="token punctuation">;</span> <span class="token comment">// 用 LRU 算法删除对象，直到 totalCount &lt;= count</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>trimToCost<span class="token punctuation">:</span><span class="token punctuation">(</span>NSUInteger<span class="token punctuation">)</span>cost<span class="token punctuation">;</span> <span class="token comment">// 用 LRU 算法删除对象，直到 totalCost &lt;= cost</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>trimToAge<span class="token punctuation">:</span><span class="token punctuation">(</span>NSTimeInterval<span class="token punctuation">)</span>age<span class="token punctuation">;</span> <span class="token comment">// 用 LRU 算法删除对象，直到所有到期对象全部被删除</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">@end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-yymemorycache-是如何做到线程安全的" tabindex="-1"><a class="header-anchor" href="#_1-3-yymemorycache-是如何做到线程安全的"><span>1.3. YYMemoryCache 是如何做到线程安全的</span></a></h2><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token keyword">@implementation</span> YYMemoryCache <span class="token punctuation">{</span></span>
<span class="line">    pthread_mutex_t _lock<span class="token punctuation">;</span> <span class="token comment">// 线程锁，旨在保证 YYMemoryCache 线程安全</span></span>
<span class="line">    _YYLinkedMap <span class="token operator">*</span>_lru<span class="token punctuation">;</span> <span class="token comment">// _YYLinkedMap，YYMemoryCache 通过它间接操作缓存对象</span></span>
<span class="line">    dispatch_queue_t _queue<span class="token punctuation">;</span> <span class="token comment">// 串行队列，用于 YYMemoryCache 的 trim 操作</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在最初 YYMemoryCache 这里使用的锁是 OSSpinLock 自旋锁（详见 <a href="https://blog.ibireme.com/2015/10/26/yycache/" target="_blank" rel="noopener noreferrer">YYCache 设计思路</a> 备注-关于锁），后面有人在 Github 向作者提 issue 反馈 OSSpinLock 不安全，经过作者的确认（详见 不再安全的 OSSpinLock）最后选择用 pthread_mutex 替代 OSSpinLock。</p></div><h2 id="_1-4-lru-淘汰算法" tabindex="-1"><a class="header-anchor" href="#_1-4-lru-淘汰算法"><span>1.4. LRU 淘汰算法</span></a></h2><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p><p>最常见的实现是使用一个链表保存缓存数据</p><p>【命中率】</p><p>当存在热点数据时，LRU 的效率很好，但偶发性的、周期性的批量操作会导致 LRU 命中率急剧下降，缓存污染情况比较严重。</p><p>Cache 的容量是有限的，当 Cache 的空间都被占满后，如果再次发生缓存失效，就必须选择一个缓存块来替换掉。LRU 法是依据各块使用的情况， 总是选择那个最长时间未被使用的块替换。这种方法比较好地反映了程序局部性规律</p><h2 id="_1-5-数据结构" tabindex="-1"><a class="header-anchor" href="#_1-5-数据结构"><span>1.5. 数据结构</span></a></h2><ul><li>双向链表 (Doubly Linked List) <code>_YYLinkedMap</code></li><li>哈希表 (Dictionary) <code>CFMutableDictionaryRef _dic</code></li></ul><h2 id="_1-6-缓存操作" tabindex="-1"><a class="header-anchor" href="#_1-6-缓存操作"><span>1.6. 缓存操作</span></a></h2><ul><li>新数据插入到链表头部；</li><li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</li><li>当链表满的时候，将链表尾部的数据丢弃。</li></ul><h2 id="_1-7-分析图" tabindex="-1"><a class="header-anchor" href="#_1-7-分析图"><span>1.7. 分析图</span></a></h2><figure><img src="https://s3.bmp.ovh/imgs/2024/01/20/c6e7391286dce045.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-8-yymemorycache-m-里的两个分类" tabindex="-1"><a class="header-anchor" href="#_1-8-yymemorycache-m-里的两个分类"><span>1.8. YYMemoryCache.m 里的两个分类</span></a></h2><ol><li><p>链表节点 <code>_YYLinkedMapNode</code></p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token keyword">@interface</span> _YYLinkedMapNode <span class="token punctuation">:</span> NSObject <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">@</span>package</span>
<span class="line">    <span class="token comment">// 指向前一个节点</span></span>
<span class="line">    __unsafe_unretained _YYLinkedMapNode <span class="token operator">*</span>_prev<span class="token punctuation">;</span> <span class="token comment">// retained by dic</span></span>
<span class="line">    <span class="token comment">// 指向后一个节点</span></span>
<span class="line">    __unsafe_unretained _YYLinkedMapNode <span class="token operator">*</span>_next<span class="token punctuation">;</span> <span class="token comment">// retained by dic</span></span>
<span class="line">    <span class="token comment">// 缓存key</span></span>
<span class="line">    id _key<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 缓存对象</span></span>
<span class="line">    id _value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 当前缓存内存开销</span></span>
<span class="line">    NSUInteger _cost<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 缓存时间</span></span>
<span class="line">    NSTimeInterval _time<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">@end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>链表 <code>_YYLinkedMap</code></p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token keyword">@interface</span> _YYLinkedMap <span class="token punctuation">:</span> NSObject <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">@</span>package</span>
<span class="line">    <span class="token comment">// 用字典保存所有节点_YYLinkedMapNode (为什么不用oc字典?因为用CFMutableDictionaryRef效率高，毕竟基于c)</span></span>
<span class="line">    CFMutableDictionaryRef _dic<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 总缓存开销</span></span>
<span class="line">    NSUInteger _totalCost<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 总缓存数量</span></span>
<span class="line">    NSUInteger _totalCount<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 链表头节点</span></span>
<span class="line">    _YYLinkedMapNode <span class="token operator">*</span>_head<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 链表尾节点</span></span>
<span class="line">    _YYLinkedMapNode <span class="token operator">*</span>_tail<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 是否在主线程上，异步释放 _YYLinkedMapNode对象</span></span>
<span class="line">    BOOL _releaseOnMainThread<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 是否异步释放 _YYLinkedMapNode对象</span></span>
<span class="line">    BOOL _releaseAsynchronously<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 添加节点到链表头节点</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>insertNodeAtHead<span class="token punctuation">:</span><span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 移动当前节点到链表头节点</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>bringNodeToHead<span class="token punctuation">:</span><span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 移除链表节点</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeNode<span class="token punctuation">:</span><span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 移除链表尾节点(如果存在)</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>removeTailNode<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 移除所有缓存</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeAll<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">@end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_1-9-链表插入、查找、替换操作实现" tabindex="-1"><a class="header-anchor" href="#_1-9-链表插入、查找、替换操作实现"><span>1.9. 链表插入、查找、替换操作实现</span></a></h2><ul><li><p>添加节点到链表头节点</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token comment">// 添加节点到链表头节点</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>insertNodeAtHead<span class="token punctuation">:</span><span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>node <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 哈希表保存链表节点node</span></span>
<span class="line">    <span class="token function">CFDictionarySetValue</span><span class="token punctuation">(</span>_dic<span class="token punctuation">,</span> <span class="token punctuation">(</span>__bridge <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>_key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>__bridge <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 叠加该缓存开销到总内存开销</span></span>
<span class="line">    _totalCost <span class="token operator">+</span><span class="token operator">=</span> node<span class="token operator">-&gt;</span>_cost<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 总缓存数+1</span></span>
<span class="line">    _totalCount<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_head<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 存在链表头，取代当前表头</span></span>
<span class="line">        node<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> _head<span class="token punctuation">;</span></span>
<span class="line">        _head<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 重新赋值链表表头临时变量_head</span></span>
<span class="line">        _head <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 不存在链表头</span></span>
<span class="line">        _head <span class="token operator">=</span> _tail <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://upload-images.jianshu.io/upload_images/295346-1cb03d629ecbf2fa.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>移动当前节点到链表头节点</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token comment">// 移动当前节点到链表头节点</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>bringNodeToHead<span class="token punctuation">:</span><span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>node <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 当前节点已是链表头节点</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_head <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_tail <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//**如果node是链表尾节点**</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 把node指向的上一个节点赋值给链表尾节点</span></span>
<span class="line">        _tail <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_prev<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 把链表尾节点指向的下一个节点赋值nil</span></span>
<span class="line">        _tail<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> nil<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//**如果node是非链表尾节点和链表头节点**</span></span>
<span class="line">        <span class="token comment">// 此处比较难以理解：总结如下</span></span>
<span class="line">        <span class="token comment">// 链接当前节点上节点(node-&gt;_prev)到当前节点下节点（node-&gt;_next）的上索引(-&gt;_prev)</span></span>
<span class="line">        node<span class="token operator">-&gt;</span>_next<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_prev<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 链接当前节点下节点(node-&gt;_next)到当前节点上节点（node-&gt;_prev）的下索引(-&gt;_next)</span></span>
<span class="line">        node<span class="token operator">-&gt;</span>_prev<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 此处操作等于将本节点上下索引分别赋值给右左节点上下索引，将上下节点链接</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 把链表头节点赋值给node指向的下一个节点</span></span>
<span class="line">    node<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> _head<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 把node指向的上一个节点赋值nil</span></span>
<span class="line">    node<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> nil<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 把节点赋值给链表头节点的指向的上一个节点</span></span>
<span class="line">    _head<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line">    _head <span class="token operator">=</span> node<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://upload-images.jianshu.io/upload_images/295346-682e8396c2d9e092.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>移除节点</p><ul><li><p>移除指定节点</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token comment">// 移除节点</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeNode<span class="token punctuation">:</span><span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>node <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 从字典中移除node</span></span>
<span class="line">    <span class="token function">CFDictionaryRemoveValue</span><span class="token punctuation">(</span>_dic<span class="token punctuation">,</span> <span class="token punctuation">(</span>__bridge <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 减掉总内存消耗</span></span>
<span class="line">    _totalCost <span class="token operator">-</span><span class="token operator">=</span> node<span class="token operator">-&gt;</span>_cost<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// // 总缓存数-1</span></span>
<span class="line">    _totalCount<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 重新连接链表(看图分析吧)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>_next<span class="token punctuation">)</span> node<span class="token operator">-&gt;</span>_next<span class="token operator">-&gt;</span>_prev <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>_prev<span class="token punctuation">)</span> node<span class="token operator">-&gt;</span>_prev<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_head <span class="token operator">==</span> node<span class="token punctuation">)</span> _head <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_tail <span class="token operator">==</span> node<span class="token punctuation">)</span> _tail <span class="token operator">=</span> node<span class="token operator">-&gt;</span>_prev<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>移除尾节点</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token comment">// 移除尾节点(如果存在)</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span>_YYLinkedMapNode <span class="token operator">*</span><span class="token punctuation">)</span>removeTailNode <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_tail<span class="token punctuation">)</span> <span class="token keyword">return</span> nil<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 拷贝一份要删除的尾节点指针</span></span>
<span class="line">    _YYLinkedMapNode <span class="token operator">*</span>tail <span class="token operator">=</span> _tail<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 移除链表尾节点</span></span>
<span class="line">    <span class="token function">CFDictionaryRemoveValue</span><span class="token punctuation">(</span>_dic<span class="token punctuation">,</span> <span class="token punctuation">(</span>__bridge <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_tail<span class="token operator">-&gt;</span>_key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 减掉总内存消耗</span></span>
<span class="line">    _totalCost <span class="token operator">-</span><span class="token operator">=</span> _tail<span class="token operator">-&gt;</span>_cost<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 总缓存数-1</span></span>
<span class="line">    _totalCount<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_head <span class="token operator">==</span> _tail<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 清除节点，链表上已无节点了</span></span>
<span class="line">        _head <span class="token operator">=</span> _tail <span class="token operator">=</span> nil<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 设倒数第二个节点为链表尾节点</span></span>
<span class="line">        _tail <span class="token operator">=</span> _tail<span class="token operator">-&gt;</span>_prev<span class="token punctuation">;</span></span>
<span class="line">        _tail<span class="token operator">-&gt;</span>_next <span class="token operator">=</span> nil<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 返回完tail后_tail将会释放</span></span>
<span class="line">    <span class="token keyword">return</span> tail<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>移除所有缓存</p><div class="language-objc line-numbers-mode" data-highlighter="prismjs" data-ext="objc" data-title="objc"><pre><code><span class="line"><span class="token comment">// 移除所有缓存</span></span>
<span class="line"><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>removeAll <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 清空内存开销与缓存数量</span></span>
<span class="line">    _totalCost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    _totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 清空头尾节点</span></span>
<span class="line">    _head <span class="token operator">=</span> nil<span class="token punctuation">;</span></span>
<span class="line">    _tail <span class="token operator">=</span> nil<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">CFDictionaryGetCount</span><span class="token punctuation">(</span>_dic<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 拷贝一份字典</span></span>
<span class="line">        CFMutableDictionaryRef holder <span class="token operator">=</span> _dic<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 重新分配新的空间</span></span>
<span class="line">        _dic <span class="token operator">=</span> <span class="token function">CFDictionaryCreateMutable</span><span class="token punctuation">(</span><span class="token function">CFAllocatorGetDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>kCFTypeDictionaryKeyCallBacks<span class="token punctuation">,</span> <span class="token operator">&amp;</span>kCFTypeDictionaryValueCallBacks<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_releaseAsynchronously<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 异步释放缓存</span></span>
<span class="line">            dispatch_queue_t queue <span class="token operator">=</span> _releaseOnMainThread <span class="token operator">?</span> <span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">YYMemoryCacheGetReleaseQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">dispatch_async</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">CFRelease</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hold and release in specified queue</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_releaseOnMainThread <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">pthread_main_np</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 主线程上释放缓存</span></span>
<span class="line">            <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">CFRelease</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hold and release in specified queue</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 同步释放缓存</span></span>
<span class="line">            <span class="token function">CFRelease</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,28)]))}const i=s(t,[["render",l],["__file","YYMemoryCache.html.vue"]]),u=JSON.parse('{"path":"/tutorial/iPhone/source/YYMemoryCache.html","title":"YYCache优秀的缓存设计","lang":"zh-CN","frontmatter":{"title":"YYCache优秀的缓存设计","date":"2019-04-26T16:08:25.000Z","star":true,"category":["iOS"],"tag":["iOS"],"description":"1.1. 前言 开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？ 本文将结合 YYCache 的源码逐步带大家找到答案。 YYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一） YYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，...","head":[["meta",{"property":"og:url","content":"https://www.viptv.work/tutorial/iPhone/source/YYMemoryCache.html"}],["meta",{"property":"og:site_name","content":"VIPTV - 工作室"}],["meta",{"property":"og:title","content":"YYCache优秀的缓存设计"}],["meta",{"property":"og:description","content":"1.1. 前言 开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？ 本文将结合 YYCache 的源码逐步带大家找到答案。 YYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一） YYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://s3.bmp.ovh/imgs/2024/01/20/c6e7391286dce045.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T00:50:16.000Z"}],["meta",{"property":"article:tag","content":"iOS"}],["meta",{"property":"article:published_time","content":"2019-04-26T16:08:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-22T00:50:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"YYCache优秀的缓存设计\\",\\"image\\":[\\"https://s3.bmp.ovh/imgs/2024/01/20/c6e7391286dce045.webp\\",\\"https://upload-images.jianshu.io/upload_images/295346-1cb03d629ecbf2fa.png\\",\\"https://upload-images.jianshu.io/upload_images/295346-682e8396c2d9e092.png\\"],\\"datePublished\\":\\"2019-04-26T16:08:25.000Z\\",\\"dateModified\\":\\"2024-11-22T00:50:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hefung\\",\\"url\\":\\"/about/us\\"}]}"]]},"headers":[{"level":2,"title":"1.1. 前言","slug":"_1-1-前言","link":"#_1-1-前言","children":[]},{"level":2,"title":"1.2. 介绍","slug":"_1-2-介绍","link":"#_1-2-介绍","children":[]},{"level":2,"title":"1.3. YYMemoryCache 是如何做到线程安全的","slug":"_1-3-yymemorycache-是如何做到线程安全的","link":"#_1-3-yymemorycache-是如何做到线程安全的","children":[]},{"level":2,"title":"1.4. LRU 淘汰算法","slug":"_1-4-lru-淘汰算法","link":"#_1-4-lru-淘汰算法","children":[]},{"level":2,"title":"1.5. 数据结构","slug":"_1-5-数据结构","link":"#_1-5-数据结构","children":[]},{"level":2,"title":"1.6. 缓存操作","slug":"_1-6-缓存操作","link":"#_1-6-缓存操作","children":[]},{"level":2,"title":"1.7. 分析图","slug":"_1-7-分析图","link":"#_1-7-分析图","children":[]},{"level":2,"title":"1.8. YYMemoryCache.m 里的两个分类","slug":"_1-8-yymemorycache-m-里的两个分类","link":"#_1-8-yymemorycache-m-里的两个分类","children":[]},{"level":2,"title":"1.9. 链表插入、查找、替换操作实现","slug":"_1-9-链表插入、查找、替换操作实现","link":"#_1-9-链表插入、查找、替换操作实现","children":[]}],"git":{"createdTime":1732236616000,"updatedTime":1732236616000,"contributors":[{"name":"qq2236639958","email":"qq2236639958@outlook.com","commits":1}]},"readingTime":{"minutes":8.17,"words":2451},"filePathRelative":"tutorial/iPhone/source/YYMemoryCache.md","localizedDate":"2019年4月27日","excerpt":"<h2>1.1. 前言</h2>\\n<p>开发中总会用到各种缓存，但是各位有没有考虑过什么样的缓存才能被叫做优秀的缓存，或者说优秀的缓存应该具备哪些特质？<br>\\n本文将结合 YYCache 的源码逐步带大家找到答案。<br>\\nYYCache 是一个线程安全的高性能键值缓存（该项目是 YYKit 组件之一）<br>\\nYYCache 的代码逻辑清晰，注释详尽，加上自身不算太大的代码量使得其阅读非常简单，更加难能可贵的是它的性能还非常高。</p>\\n","autoDesc":true}');export{i as comp,u as data};
